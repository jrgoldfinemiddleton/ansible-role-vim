---
- name: Include OS-specific variables
  include_vars: '{{ ansible_os_family }}.yml'

- name: Include OS-specific tasks
  include_tasks: 'setup-{{ ansible_os_family }}.yml'
  when: vim_install_package

- name: Create local vim configuration directory
  file:
    path: '{{ vim_local_config_dir }}'
    state: directory
    mode: 0750

- name: Create vim configuration subdirectories
  file:
    path: '{{ vim_local_config_dir }}/{{ item }}'
    state: directory
    mode: 0750
  loop: '{{ vim_local_config_subdirs }}'

- name: Download autoload scripts
  get_url:
    url: '{{ item.url }}'
    dest: '{{ vim_local_config_dir }}/autoload/{{ item.filename }}'
  loop: '{{ vim_install_autoload_scripts }}'
  when: (item.state | d('present')) == 'present'

- name: Remove old autoload scripts
  file:
    path: '{{ vim_local_config_dir }}/autoload/{{ item.filename }}'
    state: absent
  loop: '{{ vim_install_autoload_scripts }}'
  when: (item.state | d('present')) == 'absent'

- name: Clone updated vim plugin repos
  git:
    repo: '{{ item.repo }}'
    dest: '{{ vim_local_config_dir }}/bundle/{{ item.name }}'
    version: "{{ item.version | d('master') }}"
    accept_hostkey: '{{ item.accept_hostkey | d(true) }}'
  loop: '{{ vim_install_plugins }}'
  when: (item.state | d('present')) == 'present'

- name: Remove old plugins
  file:
    path: '{{ vim_local_config_dir }}/bundle/{{ item.name }}'
    state: absent
  loop: '{{ vim_install_plugins }}'
  when: (item.state | d('present')) == 'absent'

- name: Download local vimrc file
  get_url:
    url: '{{ vim_local_vimrc_url }}'
    dest: '{{ vim_local_vimrc_path }}'
  when: vim_install_vimrc | d(false)
